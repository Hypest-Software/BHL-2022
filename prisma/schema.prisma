datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String  @db.ObjectId
  published Boolean @default(false)
}

model FavoriteWaypoint {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  lat      Float
  lng      Float
  address  String
  author   User?  @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  balance          Float              @default(0.0)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rides         Ride[]
  transactions  Transaction[]
  FavoriteWaypoint FavoriteWaypoint[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  price    Float
  duration Int    @unique
}

enum Conveyance {
  ELECTRIC_CAR
  BUS
  BIKE
}

model Ride {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  start_lat  Float
  start_lng  Float
  end_lat    Float
  end_lng    Float
  time       DateTime   @default(now())
  distance   Float
  conveyance Conveyance
  points     Float

  air_co    Float
  air_no    Float
  air_no2   Float
  air_o3    Float
  air_so2   Float
  air_pm2_5 Float
  air_pm10  Float
  air_nh3   Float

  userId String @db.ObjectId
}

enum TransactionType {
  TOP_UP
  SINGLE_RIDE
  PAY_AS_YOU_GO
  REFUND
}

model Transaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  type      TransactionType
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  amount    Float
  createdAt DateTime
}
