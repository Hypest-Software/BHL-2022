datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model FavoriteWaypoint {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  lat     Float
  lng     Float
  address String
  user    User?  @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  balance           Float              @default(0.0)
  accounts          Account[]
  sessions          Session[]
  rides             Ride[]
  transactions      Transaction[]
  favoriteWaypoints FavoriteWaypoint[]
  boughtTickets     BoughtTicket[]
}

model BoughtTicket {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  ticketCount Int
  ticketId    String @db.ObjectId
  ticket      Ticket @relation(fields: [ticketId], references: [id])
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  price        Float
  duration     Int            @unique
  BoughtTicket BoughtTicket[]
}

enum Conveyance {
  ELECTRIC_CAR
  TRANSIT
  BIKE
}

model Ride {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  start_lat  Float
  start_lng  Float
  end_lat    Float?
  end_lng    Float?
  start_time DateTime
  end_time   DateTime?
  distance   Float?
  conveyance Conveyance?
  points     Float?
  ticket_id  String?
  air_co     Float?
  air_no     Float?
  air_no2    Float?
  air_o3     Float?
  air_so2    Float?
  air_pm2_5  Float?
  air_pm10   Float?
  air_nh3    Float?

  userId String @db.ObjectId
}

enum TransactionType {
  TOP_UP
  SINGLE_RIDE
  PAY_AS_YOU_GO
  REFUND
}

model Transaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  type      TransactionType
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  amount    Float
  createdAt DateTime
}
